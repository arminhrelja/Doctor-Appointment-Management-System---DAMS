// <auto-generated />
using System;
using Doctor_Appointment_Management_System___DAMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Doctor_Appointment_Management_System___DAMS.Migrations
{
    [DbContext(typeof(DamsContext))]
    partial class DamsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.HasKey("DepartmentId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InstitutionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("InstitutionTypeId");

                    b.ToTable("HealthCareInstitutions");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.InstitutionType", b =>
                {
                    b.Property<int>("InstitutionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstitutionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InstitutionTypeId");

                    b.ToTable("InstitutionTypes");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MedicalRecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("PaymentId")
                        .HasName("PK_Bills");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatus", (string)null);
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int")
                        .HasColumnName("InstitutionID");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrimaryRoleId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Speciality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PrimaryRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserInstitution", b =>
                {
                    b.Property<int>("UserInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserInstitutionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInstitutionId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("WorkingDays")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserInstitutionId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInstitution", (string)null);
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserRoleMapping", b =>
                {
                    b.Property<int>("UserRoleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleMappingId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleMappingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Appointment", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Doctor")
                        .WithMany("AppointmentDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Users1");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", "Institution")
                        .WithMany("Appointments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_HealthCareInstitutions");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Patient")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Users");

                    b.Navigation("Doctor");

                    b.Navigation("Institution");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Department", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", "Institution")
                        .WithMany("Departments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Departments_HealthCareInstitutions");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.InstitutionType", "InstitutionType")
                        .WithMany("HealthCareInstitutions")
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HealthCareInstitutions_InstitutionTypes");

                    b.Navigation("InstitutionType");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.MedicalRecord", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Doctor")
                        .WithMany("MedicalRecordDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecords_Users1");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", "Institution")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecords_HealthCareInstitutions");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Patient")
                        .WithMany("MedicalRecordPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalRecords_Users");

                    b.Navigation("Doctor");

                    b.Navigation("Institution");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Payment", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payments_Appointments");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.PaymentStatus", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payments_PaymentStatus");

                    b.Navigation("Appointment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Prescription", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Doctor")
                        .WithMany("PrescriptionDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Users1");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", "Institution")
                        .WithMany("Prescriptions")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_HealthCareInstitutions");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "Patient")
                        .WithMany("PrescriptionPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Prescriptions_Users");

                    b.Navigation("Doctor");

                    b.Navigation("Institution");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.User", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.UserRole", "PrimaryRole")
                        .WithMany()
                        .HasForeignKey("PrimaryRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_UserRoles");

                    b.Navigation("PrimaryRole");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserInstitution", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.Department", "Department")
                        .WithMany("UserInstitutions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserInstitution_Departments");

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "User")
                        .WithMany("UserInstitutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserInstitution_Users");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserRoleMapping", b =>
                {
                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.UserRole", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctor_Appointment_Management_System___DAMS.Models.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Appointment", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.Department", b =>
                {
                    b.Navigation("UserInstitutions");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.HealthCareInstitution", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Departments");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.InstitutionType", b =>
                {
                    b.Navigation("HealthCareInstitutions");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.User", b =>
                {
                    b.Navigation("AppointmentDoctors");

                    b.Navigation("AppointmentPatients");

                    b.Navigation("MedicalRecordDoctors");

                    b.Navigation("MedicalRecordPatients");

                    b.Navigation("PrescriptionDoctors");

                    b.Navigation("PrescriptionPatients");

                    b.Navigation("UserInstitutions");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("Doctor_Appointment_Management_System___DAMS.Models.UserRole", b =>
                {
                    b.Navigation("UserRoleMappings");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
